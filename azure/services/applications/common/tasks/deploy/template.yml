parameters:
- name: deploymentName
  type: string
  default: false

- name: environmentName
  type: string
  default: false

- name: condition
  type: string
  default: true

- name: dependsOn
  type: object
  default: []

- name: userSteps
  type: stepList
  default: []

- name: version
  type: string
  default: false

- name: artifactType
  type: string
  default: false

- name: artifactName
  type: string
  default: false

- name: artifactFeed
  type: string
  default: false

- name: tagsIncludeName
  type: string
  default: false

jobs:
- template: /azure/services/common/tasks/deploy/template.yml@cloud-shell
  parameters:
    deploymentName: ${{ parameters.deploymentName }}
    environmentName: ${{ parameters.environmentName }}
    condition: ${{ parameters.condition }}
    dependsOn: ${{ parameters.dependsOn }}
    userSteps:

    # Clone the applciation into $(Pipeline.Workspace)/application
    - checkout: self
      path: application

    # Clone the cloud-shell into $(Pipeline.Workspace)/cloud-shell
    - checkout: cloud-shell
      path: cloud-shell

    # Automated runs on a commit will pass the `version` parameter in as `false`
    # When version == false, determine the version from the git tag (created in a previous job)
    - task: Bash@3
      displayName: Determine Version
      inputs:
        workingDirectory: $(Pipeline.Workspace)/application
        targetType: inline
        script: |
          echo "VERSION = ${{ parameters.version }}, TAGS_INCLUDE_NAME = ${{ parameters.tagsIncludeName }}"
          [[ "${{ lower(parameters.version) }}" == "false" ]] && [[ "${{ lower(parameters.tagsIncludeName) }}" != "true" ]] && {
            echo "MODE: GET VERSION FROM TAG, TAGS DO NOT INCLUDE NAME"
            VERSION="$(git tag --points-at HEAD | tail -1 | sed 's:.*/::')"
          }
          [[ "${{ lower(parameters.version) }}" == "false" ]] && [[ "${{ lower(parameters.tagsIncludeName) }}" == "true" ]] && {
            echo "MODE: GET VERSION FROM TAG, TAGS INCLUDE NAME"
            VERSION="$(git tag --points-at HEAD | grep ${{ parameters.deploymentName }} | tail -1 | sed 's:.*/::')"
          }
          [[ "${{ parameters.version }}" != "false" ]] && {
            echo "MODE: VERSION MANUALLY PROVIDED"
            VERSION="${{ parameters.version }}"
          }
          echo "##vso[task.setvariable variable=VERSION]$(echo ${VERSION})"
          echo "${VERSION}"

    # Download the target artifact version into $(Pipeline.Workspace)
    - task: UniversalPackages@0
      displayName: Download Artifact
      inputs:
        command: download
        downloadDirectory: '$(Pipeline.Workspace)'
        vstsFeed: '${{ parameters.artifactFeed }}'
        vstsFeedPackage: '${{ parameters.artifactName }}-${{ parameters.artifactType }}'
        vstsPackageVersion: $(VERSION)

    # Allow this template to be extended
    - ${{ each step in parameters.userSteps }}:
      - ${{ step }}
